task_id,prompt,input_generator,input_levels,reference_solution,checker,entry_point
HumanEval/0,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""","def generate_input(size: int, lid: int, cid: int):
    threshold = random.uniform(0.1, 0.5)
    if lid == 0 and cid == 0:
        return [], threshold
    size = max(size, 2)
    gaps = [threshold * random.uniform(1.1, 1.2) for i in range(size - 1)]
    if lid == 0 and cid % 2 != 0:
        gaps[random.randint(0, size - 2)] = threshold * random.uniform(0.8, 0.9)
    numbers = [None for i in range(size)]
    numbers[0] = random.uniform(-size, size)
    for i in range(size - 1):
        numbers[i + 1] = numbers[i] + gaps[i]
    random.shuffle(numbers)
    return numbers, threshold
",20 100 10000 15000,"    numbers.sort()
    prev = float('-inf')
    for numbers in numbers:
        if numbers - prev < threshold:
            return True
        prev = numbers
    return False
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",has_close_elements
HumanEval/1,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid > 0 and cid == 0:
        m = (size + 1) // 2
        input_string = '(' * m + ')' * m
    else:
        input_string = rand_parens(size = size)
    input_string = ' ' * random.randint(0, 2) + ''.join([c + ' ' * random.randint(0, 2) for c in input_string])
    return input_string,
",100 1000 10000 15000,"    paren_string = paren_string.replace(' ', '')
    res = []
    j = 0
    dep = 0
    for i in range(len(paren_string)):
        if paren_string[i] == '(':
            dep += 1
        else:
            dep -= 1
            if dep == 0:
                i += 1
                res.append(paren_string[j : i])
                j = i
    return res
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",separate_paren_groups
HumanEval/2,"def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    random_number = random.uniform(1., float(size))
    return random_number,
",100 10000 1000000 100000000,"    return number % 1.0
","def __check(input, answer, output):
    return type(output) in (int, float) and abs(answer - output) < 1e-4
",truncate_number
HumanEval/3,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    balances = [random.randint(1, maxv) for _ in range(size)]
    balances[random.randint((size - 1) // 2, size - 1)] = 0
    if lid == 0 and cid % 2 == 0:
        balances[random.randint((size - 1) // 2, size - 1)] = random.randint(-5, -1)
    operations = [balances[i] - (balances[i - 1] if i else 0) for i in range(size)]
    return operations,
",100 10000 15000 30000,"    b = 0
    for op in operations:
        b += op
        if b < 0:
            return True
    return False
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",below_zero
HumanEval/4,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return [random.uniform(-100., 100.) for _ in range(size)],
",100 10000 15000 30000,"    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","def __check(input, answer, output):
    return type(output) in (int, float) and abs(answer - output) < 1e-4
",mean_absolute_deviation
HumanEval/5,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    if lid == 0 and cid == 0:
        numbers = []
    else:
        numbers = [random.randint(-size * size, size * size) for _ in range(size)]
    delimeter = random.randint(-size * size, size * size)
    return numbers, delimeter
",50 50 1000 20000,"    result = [delimeter] * (len(numbers) * 2 - 1) # doesn't matter even when empty
    result[0::2] = numbers
    return result
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",intersperse
HumanEval/6,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""","def generate_input(size: int, lid: int, cid: int):
    input_string = rand_parens(size = size, sep = ' ')
    return input_string,
",100 10000 15000 30000,"    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                if depth > max_depth:
                    max_depth = depth
            else:
                depth -= 1
        return max_depth
    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",parse_nested_parens
HumanEval/7,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    if lid == 0 and cid < 3:
        return [([], 'a'), (['abc', 'barcd', 'cde', 'array'], 'ra'), (['abc', 'bacd', 'cde', 'arrby'], 'b')][cid]
    size = max(size, 4)
    m = size // 2
    a = random.choice(string.ascii_lowercase)
    b = random.choice(list(set(string.ascii_lowercase) - {a}))
    substring = a * (m // 2) + b + a * (m // 2)
    input_strings = []
    for i in range(2):
        random_string = a * m + b * random.randint(1, 2) + a * m
        input_strings.append(random_string)
    return input_strings, substring
",100 1000 10000 15000,"    return [strings for strings in strings if strings.find(substring) >= 0]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",filter_by_substring
HumanEval/8,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        return [],
    input_numbers = [random.randint(1, 3) for _ in range(size)]
    return input_numbers,
",100 10000 15000 30000,"    p = 1
    for n in numbers:
        p *= n
    return sum(numbers), p
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sum_product
HumanEval/9,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    maxv = size * size
    input_numbers = [-random.randint(maxv // 2, maxv)]
    for i in range(size - 1):
        number = input_numbers[-1] + random.randint(-size, size)
        input_numbers.append(number)
    return input_numbers,
",20 100 10000 20000,"    result = []
    max_value = float('-inf')
    for number in numbers:
        if number > max_value:
            max_value = number
        result.append(max_value)
    return result
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",rolling_max
HumanEval/10,"def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0:
        if cid == 0:
            input_string = []
        elif cid == 1:
            half_string = list(random.choices(string.ascii_lowercase, k = (size + 2) // 3))
            input_string = half_string + ([] if random.randint(0, 1) else [random.choice(string.ascii_lowercase)]) + half_string[:: -1]
        else:
            input_string = random.choices(string.ascii_lowercase, k=size)
    else:
        a = random.choice(string.ascii_lowercase[: -1])
        b = chr(ord(a) + 1)
        input_string = [a for i in range(size)]
        input_string[int(size * 0.75)] = b
    return ''.join(input_string),
",100 1000 10000 15000,"    if not string:
        return string
    #assert '\x00' not in string
    reversed_s = string[:: -1]
    pattern = reversed_s + '\x00' + string
    # KMP
    m = len(pattern)
    fail = [0] * (m + 1)
    j = 0
    for i in range(1, m):
        c = pattern[i]
        while j > 0 and pattern[j] != c:
            j = fail[j]
        if j > 0 or pattern[0] == c:
            j += 1
        fail[i + 1] = j
    return string[: len(string) - fail[-1]] + reversed_s
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",make_palindrome
HumanEval/11,"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return tuple(''.join(random.choice('01') for _ in range(size)) for _ in range(2))
",100 10000 20000 40000,"    return bin(int(a, 2) ^ int(b, 2))[2:].zfill(len(a))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",string_xor
HumanEval/12,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import math
    m = int(math.log(size + 1))
    input_strings = []
    for _ in range((size + m - 1) // m):
        random_length = random.randint(1, m)
        random_string = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random_length))
        input_strings.append(random_string)
    return input_strings,
",10 30000 45000 90000,"    if strings:
        return max(strings, key = len)
    else:
        return None
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",longest
HumanEval/13,"def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0:
        if cid < 4:
            a = random.randint((size + 1) // 2, size)
            return [(0, a), (a, 0), (5, 3), (35, 21)][cid]
        else:
            m = int(size ** .5) + 1
            d = rand_probably_prime(m)
            return d * random.randint((size + 1) // 2, size), d * random.randint((size + 1) // 2, size)
    else:
        a, b = 2, 1
        while a < size:
            a, b = b, a + b
        for i in range(cid):
            a, b = b, a + b
        if cid % 2:
            return a, b
        else:
            return b, a
",20 1000 1000000 1000000000,"    while b:
        a, b = b, a % b
    return a
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",greatest_common_divisor
HumanEval/14,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(size)),
",10 600 750 900,"    return [string[: i] for i in range(1, len(string) + 1)]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",all_prefixes
HumanEval/15,"def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return random.randint((size + 1) // 2, size),
",100 10000 15000 30000,"    return ' '.join(map(str, range(n + 1)))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",string_sequence
HumanEval/16,"def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    return ''.join(random.choice(string.ascii_letters) for _ in range(size)),
",100 10000 15000 30000,"    return len(set(string.lower()))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",count_distinct_characters
HumanEval/17,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    notes = ['o', 'o|', '.|']
    music_string = ' '.join(random.choice(notes) for _ in range(size))
    return music_string,
",100 10000 15000 30000,"    notes = {'o': 4, 'o|': 2, '.|': 1}
    return list(map(notes.get, music_string.split()))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",parse_music
HumanEval/18,"def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0:
        if cid < 3:
            return [('baaaaaaaaa', 'aaa'), ('ababababab', 'aba'), ('abbabaabbaababba', 'bba')][cid]
        else:
            c = random.choice(string.ascii_letters)
            original_string = c * (size // 2) + ''.join(random.choice(string.ascii_letters) for _ in range(2 + cid % 2)) + c * (size // 2)
            substring = c * ((size + 1) // 4)
            return original_string, substring
    else:
        c = random.choice(string.ascii_letters)
        return c * size, c * ((size + 1) // 2)
",100 50000 100000 150000,"    n = len(string)
    m = len(substring)
    if n <= 55000:
        cnt = 0
        for i in range(n - m + 1):
            if string.startswith(substring, i):
                cnt += 1
    else:
        # KMP preprocessing
        fail = [0] * (m + 1)
        j = 0
        for i in range(1, m):
            c = substring[i]
            while j > 0 and substring[j] != c:
                j = table[j]
            if j > 0 or substring[0] == c:
                j += 1
            fail[i + 1] = j
        # KMP matching
        cnt = 0
        j = 0
        for i in range(n):
            c = string[i]
            while j > 0 and substring[j] != c:
                j = fail[j]
            if j > 0 or substring[0] == c:
                j += 1
            if j == m:
                cnt += 1
                j = fail[j]
    return cnt
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",how_many_times
HumanEval/19,"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    numerals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
    input_string = ' '.join(random.choice(numerals) for _ in range(size))
    return input_string,
",100 10000 15000 30000,"    from collections import Counter
    cnt = Counter(numbers.split())
    return (""zero "" * (cnt[""zero""] if ""zero"" in cnt else 0) + ""one "" * (cnt[""one""] if ""one"" in cnt else 0) + ""two "" * (cnt[""two""] if ""two"" in cnt else 0) + ""three "" * (cnt[""three""] if ""three"" in cnt else 0) + ""four "" * (cnt[""four""] if ""four"" in cnt else 0) + ""five "" * (cnt[""five""] if ""five"" in cnt else 0) + ""six "" * (cnt[""six""] if ""six"" in cnt else 0) + ""seven "" * (cnt[""seven""] if ""seven"" in cnt else 0) + ""eight "" * (cnt[""eight""] if ""eight"" in cnt else 0) + ""nine "" * (cnt[""nine""] if ""nine"" in cnt else 0)).strip(' ')
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sort_numbers
HumanEval/20,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    input_numbers = [random.uniform(0., 1.) for _ in range(size)]
    return input_numbers,
",20 100 10000 15000,"    numbers.sort()
    min_diff = float(""inf"")
    min_pair = None
    for l, r in zip(numbers[:-1], numbers[1:]):
        diff = r - l
        if diff < min_diff:
            min_diff = diff
            min_pair = (l, r)
    return min_pair
","def __check(input, answer, output):
    return type(output) == tuple and len(output) == len(answer) and all(type(b) in (int, float) for b in output) and max(abs(a - b) for a, b in zip(answer, output)) < 1e-4
",find_closest_elements
HumanEval/21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    input_numbers = [random.uniform(0., 1.) for _ in range(size)]
    mi, ma = min(input_numbers), max(input_numbers)
    if mi == ma:
        while True:
            x = random.uniform(0., 1.)
            if x != mi:
                break
        input_numbers.append(x)
    return input_numbers,
",100 10000 15000 30000,"    mi = min(numbers)
    k = 1. / (max(numbers) - mi)
    return [(x - mi) * k for x in numbers]
","def __check(input, answer, output):
    return type(output) == list and len(output) == len(answer) and all(type(b) in (int, float) for b in output) and max(abs(a - b) for a, b in zip(answer, output)) < 1e-4
",rescale_to_unit
HumanEval/22,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 2:
        return [['a', 3.14, 5], [1, 2, 3, 'abc', {}, []]][cid],
    input_data = []
    for _ in range(size):
        random_type = random.choice([int, float, str, bool])
        if random_type == int:
            value = random.randint(-1000000000, 1000000000)
        elif random_type == float:
            value = random.uniform(-1000000000., 1000000000.)
            if value % 1. == 0:
                value += 1e-5
        elif random_type == str:
            value = ''.join(random.choices('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', k = random.randint(1, 3)))
        else:
            value = random.choice([None, True, False, list(), dict(), set()])
        input_data.append(value)
    return input_data,
",100 10000 15000 30000,"    return [x for x in values if type(x) is int]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",filter_integers
HumanEval/23,"def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    random_string = ''.join(random.choice(string.ascii_letters) for _ in range(size))
    return random_string,
",100 1000 1000 1000,"    return len(string)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",strlen
HumanEval/24,"def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""","def generate_input(size: int, lid: int, cid: int):
    return rand_primality(size, lid, cid),
",100 10000 500000000 1000000000,"    if n % 2 == 0:
        return n // 2
    if n % 3 == 0:
        return n // 3
    import math
    for i in range(5, math.isqrt(n) + 1, 6):
        if n % i == 0:
            return n // i
        i += 2
        if n % i == 0:
            return n // i
    return 1
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",largest_divisor
HumanEval/25,"from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""","def generate_input(size: int, lid: int, cid: int):
    return rand_primality(size, lid, cid),
",100 10000 500000000 1000000000,"    ans = []
    while n % 2 == 0:
        n //= 2
        ans.append(2)
    while n % 3 == 0:
        n //= 3
        ans.append(3)
    import math
    for i in range(5, math.isqrt(n) + 1, 6):
        if i * i > n:
            break
        while n % i == 0:
            n //= i
            ans.append(i)
        i += 2
        while n % i == 0:
            n //= i
            ans.append(i)
    if n > 1:
        ans.append(n)
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",factorize
HumanEval/26,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        return [3, 2, 1, 2, 4],
    else:
        input_data = []
        while len(input_data) < size:
            input_data.extend([random.randint(-1000000000, 1000000000)] * random.randint(1, min(3, size - len(input_data))))
        random.shuffle(input_data)
        return input_data,
",100 100 5000 20000,"    import collections
    cnt = collections.Counter(numbers) # Counter preserves the order of elements
    return [n for n, c in cnt.items() if c == 1]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",remove_duplicates
HumanEval/27,"def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    random_string = ''.join(random.choice(string.ascii_letters) for _ in range(size))
    return random_string,
",100 10000 20000 40000,"    return string.swapcase()
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",flip_case
HumanEval/28,"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    if lid == 0 and cid == 0:
        input_data = []
    else:
        input_data = [''.join(random.choice(string.ascii_letters) for _ in range(random.randint(1, 10))) for _ in range(size)]
    return input_data,
",100 1000 10000 15000,"    return ''.join(strings)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",concatenate
HumanEval/29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    input_data = []
    sub_length = 10
    target = ''.join(random.choice(string.ascii_letters) for _ in range(sub_length))
    if lid > 0 or cid > 0:
        for _ in range(size):
            if random.randint(0, 1):
                prefix = target
            else:
                i = random.randint(0, sub_length - 1)
                prefix = target[: i] + random.choice(string.ascii_letters) + target[i + 1 :]
            input_data.append(prefix + ''.join(random.choice(string.ascii_letters) for _ in range(sub_length)))
    return input_data, target
",100 10000 15000 30000,"    return [x for x in strings if x.startswith(prefix)]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",filter_by_prefix
HumanEval/30,"def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""","def generate_input(size: int, lid: int, cid: int):
    l = [0] + [random.randint(-size * size, size * size) for _ in range(size)]
    random.shuffle(l)
    return l,
",100 10000 15000 30000,"    return [e for e in l if e > 0]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",get_positive
HumanEval/31,"def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""","def generate_input(size: int, lid: int, cid: int):
    return rand_primality(size, lid, cid),
",100 10000 500000000 1000000000,"    if n <= 1:
        return False
    elif n % 2 == 0:
        return n == 2
    elif n % 3 == 0:
        return n == 3
    else:
        import math
        for i in range(5, math.isqrt(n) + 1, 6):
            if n % i == 0 or n % (i + 2) == 0:
                return False
        return True
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_prime
HumanEval/32,"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    size += size % 2
    if size == 20: # hard case
        coefs = [91311625733/337483077750, -54772408813/97692469875, 10931526124/10854718875, -1438598027/3831077250, 344532533/1915538625, -476755771/5108103000, 17170963/547296750, -18359647/2357586000, 1280459/785862000, -1477249/5143824000, 52979/1285956000, -5489/1143072000, 8677/18860688000, -10099/280215936000, 367/163459296000, -419/3923023104000, 29/7846046208000, -31/355687428096000, 1/800296713216000, -1/121645100408832000]
        assert len(coefs) == size
        a = random.uniform(0.9, 1.1)
        c = 1.
        for i in range(len(coefs)):
            coefs[i] /= c
            c *= a
    else: # generate random coefficients, including one non-zero coefficient for a solution
        coefs = [random.uniform(-1., 1.) for _ in range(size - 1)]
        coefs.append(1.)  # set one non-zero coefficient
        if size > 2 and cid % 2 == 0: coefs[1] = 0.
    return coefs,
",4 10 20 20,"    def eval_poly(xs: list, x: float):
        import math
        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])
    begin = -1.
    end = 1.
    fb = eval_poly(xs, begin)
    fe = eval_poly(xs, end)
    while fb * fe >= 0:
        begin *= 2.0
        end *= 2.0
        fb = eval_poly(xs, begin)
        fe = eval_poly(xs, end)
    while end - begin > 1e-10 and max(abs(fb), abs(fe)) > 1e-6:
        center = (begin + end) / 2.0
        fc = eval_poly(xs, center)
        flag = fc * fb
        if flag > 0:
            begin = center
            fb = fc
        elif flag < 0:
            end = center
            fe = fc
        else:
            return center if fc == 0 else begin
    return begin if abs(fb) < abs(fe) else end
","def __check(input, answer, output):
    import math
    return type(output) in (int, float) and math.fabs(poly(*input, output)) < 1e-4
",find_zero
HumanEval/33,"def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        l = []
    else:
        l = [random.randint(-size * size, size * size) for _ in range(size)]
    return l,
",100 10000 20000 40000,"    l[::3] = sorted(l[::3])
    return l
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sort_third
HumanEval/34,"def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        input_list = [4, 3, 4, 2, 7, 7, 9, 0, 342]
    else:
        maxv = size * size
        input_list = [random.randint(-maxv, maxv) for _ in range(size)]
    return input_list,
",100 10000 15000 30000,"    return sorted(set(l))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",unique
HumanEval/35,"def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    input_list = [random.randint(-maxv, maxv) for _ in range(size)]
    return input_list,
",100 10000 15000 30000,"    return max(l)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",max_element
HumanEval/36,"def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    input_number = random.randint((size + 1) // 2, size)
    return input_number,
",1000 10000 1000000 1000000000,"    if n < 261111:
        ns = []
        for i in range(77, n, 11):
            ns.append(str(i))
        for i in range(78, n, 13):
            if i % 11 != 0:
                ns.append(str(i))
        return ''.join(ns).count('7')
    else:
        a = []
        while n > 0:
            n, u = divmod(n, 10)
            a.append(u)
        m = len(a)
        b = [[1, 1]] # [10 ** i % 11, 10 ** i % 13]
        for i in range(m - 1):
            b.append([(b[i][0] * 10) % 11, (b[i][1] * 10) % 13])
        f = [[[[[0, 0] for w in range(10)] for v in range(13)] for u in range(11)] for i in range(m)] # [i-th][mod 11, mod 13][digit]: [number of valid numbers, number of 7's in valid numbers]
        for u in range(10):
            f[0][u][u] = [[int(w >= u), int(u == 7 and w >= 7)] for w in range(10)]
        for i in range(1, m):
            for u in range(11):
                for v in range(13):
                    f0 = f[i - 1][u][v][9]
                    for w in range(10):
                        f1 = f[i][(u + b[i][0] * w) % 11][(v + b[i][1] * w) % 13][w]
                        f1[0] += f0[0]
                        f1[1] += f0[1] + f0[0] * int(w == 7)
            for u in range(11):
                for v in range(13):
                    f1 = f[i][u][v]
                    for w in range(1, 10):
                        f1[w][0] += f1[w - 1][0]
                        f1[w][1] += f1[w - 1][1]
        e = [[0, 0, 0] for i in range(m)]
        for i in range(m - 1, 0, -1):
            e[i - 1] = [(e[i][0] + b[i][0] * a[i]) % 11, (e[i][1] + b[i][1] * a[i]) % 13, e[i][2] + int(a[i] == 7)]
        ans = 0
        for i in range(m):
            if a[i]:
                w = a[i] - 1
                u = (-e[i][0]) % 11
                for v in range(13):
                    f1 = f[i][u][v][w]
                    ans += f1[1] + f1[0] * e[i][2]
                u0 = u
                v = (-e[i][1]) % 13
                for u in range(11):
                    if u != u0:
                        f1 = f[i][u][v][w]
                        ans += f1[1] + f1[0] * e[i][2]
        return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",fizz_buzz
HumanEval/37,"def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    input_list = [random.randint(-maxv, maxv) for _ in range(size)]
    return input_list,
",100 10000 20000 40000,"    l[::2] = sorted(l[::2])
    return l
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sort_even
HumanEval/38,"def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""","def generate_input(size: int, lid: int, cid: int):
    characters = string.ascii_letters + string.digits
    input_string = ''.join(random.choice(characters) for _ in range(size))
    return input_string,
",100 10000 15000 30000,"    m = len(s) - 2
    return """".join([(s[i + 2] + s[i : i + 2]) if i < m else s[i :] for i in range(0, len(s), 3)])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",decode_cyclic
HumanEval/39,"def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""","def generate_input(size: int, lid: int, cid: int):
    n_list = [
        [5, 4, 3, 2],
        [8, 7, 6],
        [11, 10, 9],
        [12],
    ]
    return n_list[lid][cid % len(n_list[lid])],
",5 8 11 12,"    import random
    def miller_rabin(n, k=10):
        # Miller--Rabin primality test
        if n < 2:
            return False
        if n == 2 or n == 3:
            return True
        if n % 2 == 0:
            return False
        r = 0
        d = n - 1
        while d % 2 == 0:
            r += 1
            d //= 2
        for _ in range(k):
            a = random.randint(2, n - 2)
            x = pow(a, d, n)
            if x == 1 or x == n - 1:
                continue
            for _ in range(r - 1):
                x = pow(x, 2, n)
                if x == n - 1:
                    break
            else:
                return False
        return True
    c_prime = 0
    a, b = 0, 1
    while c_prime < n:
        a, b = b, a + b
        if miller_rabin(b):
            c_prime += 1
    return b
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",prime_fib
HumanEval/40,"def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 5:
        input_list = [[0], [1, -3, 5, 0], [1, 3, -2, 1], [1, 2, 3, -6], [2, 4, -5, 3, 9, 7]][cid]
    else:
        size = max(size, 3)
        maxv = size * size
        input_list = [(random.randint(0, 1) * 2 - 1) * random.randint(maxv, maxv * 2) for _ in range(size)]
        if lid == 0 and cid % 2:
            while True:
                i, j, k = random.randint(0, size - 1), random.randint(0, size - 1), random.randint(0, size - 1)
                if i != j and i != k and j != k:
                    break
            input_list[i] = -(input_list[j] + input_list[k])
    return input_list,
",10 50 400 600,"    n = len(l)
    if n < 3:
        return False
    for i, x in enumerate(l[: n - 2]):
        buf = set()
        for y in l[i + 1 :]:
            if y in buf:
                return True
            buf.add(-x - y)
    return False
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",triples_sum_to_zero
HumanEval/41,"def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return random.randint((size + 1) // 2, size),
",10 100 100000 1000000000,"    return n**2
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",car_race_collision
HumanEval/42,"def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    input_list = [random.randint(-maxv, maxv) for _ in range(size)]
    return input_list,
",100 10000 15000 30000,"    return [e + 1 for e in l]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",incr_list
HumanEval/43,"def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 6:
        l = [[0], [1, 1, 0, 0], [1, -3, 5, 0], [1, 3, -2, 1], [1, -2, 3, 7], [2, 4, -5, 3, 5, 7]][cid]
    else:
        size = max(size, 2)
        l = [x * size * (random.randint(0, 1) * 2 - 1) for x in range(1, size + 1)]
        if lid == 0:
            while True:
                i = random.randint(0, size - 1)
                j = random.randint(0, size - 1)
                if i != j:
                    break
            if cid % 2:
                l[i] = l[j] = 0
            else:
                l[i] = -l[j]
    return l,
",20 100 10000 15000,"    l_set = set(l)
    if 0 in l_set:
        if l.count(0) >= 2:
            return True
        else:
            l_set.remove(0)
    return any(True for i in l_set if -i in l_set)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",pairs_sum_to_zero
HumanEval/44,"def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    base = random.randint(2, 9) if lid == 0 else 3
    if lid == 0 and cid == 0:
        x = 0
    else:
        x = random.randint(base ** (size - 1), base ** size - 1)
    return x, base
",10 1000 2000 4000,"    if x == 0:
        return ""0""
    s = ""0123456789""
    a = []
    while x > 0:
        x, r = divmod(x, base)
        a.append(s[r])
    return """".join(reversed(a))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",change_base
HumanEval/45,"def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    a = random.randint(1, size)
    h = random.randint(1, size)
    return a, h
",100 10000 1000000 100000000,"    return 0.5 * a * h
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",triangle_area
HumanEval/46,"def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        n = 0
    else:
        n = max(size - cid, 0)
    return n,
",30 100 300 1000,"    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    else:
        a, b, c, d = 0, 1, 0, 0
        for n in bin(n - 3)[3 :]:
            bd2 = b * d * 2
            cd = c + d
            c2d = cd + d
            c2d2 = c2d * c2d
            a, b, c, d = a * a + c * c + bd2 + cd * d * 2, a * b * 2 + bd2 + cd * (c2d + d), b * b + a * c * 2 + bd2 + c2d2, a * d * 2 + cd * b * 2 + c2d2
            if n == '1':
                a, b, c, d = d, a + d, b + d, c + d
        return 2 * b + 4 * c + 8 * d
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",fib4
HumanEval/47,"def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    input_list = [random.uniform(-maxv, maxv) for _ in range(size)]
    return input_list,
",100 10000 15000 30000,"    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",median
HumanEval/48,"def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    if lid == 0 and cid == 0:
        return '',
    charset = string.printable
    size += cid % 4 // 2 % 2
    half = list(random.choices(charset, k = (size + 1) // 2))
    text = half[: len(half) - size % 2] + half[:: -1]
    if lid == 0 and cid % 2:
        for _ in range(1):
            text[random.randint(0, len(text) - 1)] = random.choice(charset)
    return ''.join(text),
",100 10000 15000 30000,"    m = len(text) // 2
    return text[: m] == text[: -m - 1 : -1]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_palindrome
HumanEval/49,"def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    if lid == 0 and cid < 2:
        return 0, cid % 2 + 1
    n = random.randint((size + 1) // 2, size)
    p = random.randint(1, size)
    return n, p
",100 1000 1000000000 2000000000,"    return pow(2, n, p)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",modp
HumanEval/50,"def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    input_string = ''.join(random.choice(string.ascii_lowercase) for _ in range(size))
    return encode_shift(input_string),
",100 2000 10000 20000,"    a = ord('a')
    f = a + 5
    charset = set(s)
    return s.translate({ord(x): (ord(x) - f) % 26 + a for x in charset})
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",decode_shift
HumanEval/51,"def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    if lid == 0 and cid < 6:
        input_text = ['', ""abcdef\nghijklm"", 'abcdef', 'aaaaa', 'aaBAA', 'zbcd'][cid]
    else:
        vowels = [_ for _ in ""aeiouAEIOU""]
        input_text = [random.choice(string.ascii_letters) for _ in range(size)]
        for i in range(size):
            if random.randint(0, 3) == 0:
                input_text[i] = random.choice(vowels)
        input_text = ''.join(input_text)
    return input_text,
",100 10000 20000 40000,"    return text.translate({65: None, 69: None, 73: None, 79: None, 85: None, 97: None, 101: None, 105: None, 111: None, 117: None})
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",remove_vowels
HumanEval/52,"def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    l = [random.randint(-maxv, maxv) for _ in range(size)]
    if lid == 0 and cid % 2 == 0:
        t = max(l)
    else:
        t = max(l) + random.randint(1, 2)
    return l, t
",100 10000 15000 30000,"    return max(l) < t
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",below_threshold
HumanEval/53,"def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    x = random.randint(-size, size)
    y = random.randint(-size, size)
    return x, y
",1000 100000 10000000 1000000000,"    return x + y
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",add
HumanEval/54,"def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""","def generate_input(size: int, lid: int, cid: int):
    characters = string.ascii_letters + string.digits
    if lid == 0:
        if cid < 2:
            s0, s1 = [('ix', 'ixo'), ('ixo', 'ix')][cid]
        else:
            if cid % 2:
                charset = characters
            else:
                charset = random.choices(characters, k = min(len(characters), (size + 6) // 7))
            s0 = ''.join(random.choices(charset, k = size))
            s1 = ''.join(random.choices(charset, k = size))
    else:
        charset = random.choices(characters, k = min(len(characters), (size + 6) // 7))
        a = random.choice(charset)
        b = chr(ord(a) + 1)
        m = size // 3
        s0 = a * m + b + ''.join(random.choices(charset[: -1], k = m)) + b + a * m
        s1 = b * m + a + ''.join(random.choices(charset[: -1], k = m)) + a + b * m
    return s0, s1
",100 1000 10000 15000,"    return set(s0) == set(s1)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",same_chars
HumanEval/55,"def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        n = 0
    else:
        n = max(size - cid, 0)
    return n,
",10 30 9000 10000,"    if n == 0: return 0
    a, b = 0, 1
    for n in bin(n)[3 :]:
        a, b = a * a + b * b, b * (a * 2 + b)
        if n == '1':
            a, b = b, a + b
    return b
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",fib
HumanEval/56,"def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid > 0 and cid == 0:
        m = (size + 1) // 2
        brackets = ""<"" * m + "">"" * m
    else:
        brackets = rand_parens(size = size, valid = lid > 0 or cid % 2 != 0, par = '<>')
    return brackets,
",100 10000 15000 30000,"    if len(brackets) % 2 != 0:
        return False
    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
            if depth < 0:
                return False
    return depth == 0
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",correct_bracketing
HumanEval/57,"def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        l = [1]
    else:
        size = max(size, 3)
        maxv = size * size
        if cid == 0:
            l = [random.randint(1, maxv) for _ in range(size)]
        else:
            l = [random.randint(1, maxv) for _ in range(size - 2)]
            if lid > 0 or cid % 3 != 2:
                l.sort(reverse = bool(cid % 2))
            l = [l[0]] + l + [l[-1]]
    return l,
",100 1000 10000 15000,"    n = len(l)
    if n > 250:
        for i in range(1, n):
            if l[i] != l[i - 1]:
                break
        if i == n - 1:
            return True
        elif l[i] < l[i - 1]:
            for i in range(i + 1, n):
                if l[i] > l[i - 1]:
                    return False
        else: # l[i] > l[i - 1]
            for i in range(i + 1, n):
                if l[i] < l[i - 1]:
                    return False
        return True
    elif n > 1:
        return l == sorted(l) or l == sorted(l, reverse = True)
    else:
        return True
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",monotonic
HumanEval/58,"def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        return [([], []), ([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]), ([5, 3, 2, 8], [3, 2])][cid]
    else:
        maxv = size * size
        m = (size + 1) // 2
        l0 = [random.randint(-maxv, maxv) for i in range(m)]
        l1 = l0 + [random.randint(-maxv, maxv) for i in range(size - m)]
        l2 = l0 + [random.randint(-maxv, maxv) for i in range(size - m)]
        random.shuffle(l1)
        random.shuffle(l2)
        return l1, l2
",20 100 10000 15000,"    return sorted(set(l1).intersection(l2))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",common
HumanEval/59,"def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""","def generate_input(size: int, lid: int, cid: int):
    return rand_primality(size, lid, cid if lid == 0 and cid in (0, 1, 3) else (4 + cid % 2)),
",100 10000 500000000 1000000000,"    if n <= 3:
        return n
    ans = 1
    if n % 2 == 0:
        ans = 2
        while n % 2 == 0:
            n //= 2
    if n % 3 == 0:
        ans = 3
        while n % 3 == 0:
            n //= 3
    import math
    for i in range(5, math.isqrt(n) + 1, 6):
        if i * i > n:
            break
        if n % i == 0:
            ans = i
            while n % i == 0:
                n //= i
        i += 2
        if n % i == 0:
            ans = i
            while n % i == 0:
                n //= i
    if n > 1:
        ans = max(ans, n)
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",largest_prime_factor
HumanEval/60,"def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return random.randint((size + 1) // 2, size),
",10 100 10000000 1000000000,"    return (n * (n + 1)) // 2
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sum_to_n
HumanEval/61,"def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid > 0 and cid == 0:
        m = (size + 1) // 2
        brackets = ""("" * m + "")"" * m
    else:
        brackets = rand_parens(size = size, valid = lid > 0 or cid % 2 != 0)
    return brackets,
",100 10000 15000 30000,"    if len(brackets) % 2 != 0:
        return False
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
            if depth < 0:
                return False
    return depth == 0
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",correct_bracketing
HumanEval/62,"def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    input_data = [random.randint(-maxv, maxv) for _ in range(size)]
    return input_data,
",100 10000 15000 30000,"    return [xs[i] * i for i in range(1, len(xs))]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",derivative
HumanEval/63,"def fibfib(n: int):
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        n = 0
    else:
        n = size - cid
    return n,
",10 30 9000 10000,"    if n <= 2:
        return int(n == 2)
    else:
        a, b, c = 0, 1, 0
        for n in bin(n - 2)[3 :]:
            c2 = c * 2
            a, b, c = a * a + c * (2 * b + c), 2 * (a * b + c * (b + c)), b * (b + c2) + c2 * (a + c)
            if n == '1':
                a, b, c = c, a + c, b + c
        return a + b + 2 * c
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",fibfib
HumanEval/64,"def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.
    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    if lid == 0 and cid == 0:
        return """",
    vowels = ""aeiouy""
    consonants = """".join(set(string.ascii_lowercase) - set(vowels))
    input_string = []
    for i in range(size):
        if i == size - 1 and cid % 2 == 1:
            input_string.append('y')
        else:
            input_string.append(random.choice([random.choice(vowels), random.choice(consonants)]))
    input_string = """".join([c.upper() if random.randint(0, 1) else c for c in input_string])
    return input_string,
",100 1000 10000 40000,"    return int(bool(s) and (s[-1] == 'y' or s[-1] == 'Y')) + len(s) - len(s.translate({65: None, 69: None, 73: None, 79: None, 85: None, 97: None, 101: None, 105: None, 111: None, 117: None}))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",vowels_count
HumanEval/65,"def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    if lid == 0:
        x = 123456
        shift = cid + 1
    else:
        x = random.randint(10 ** (size - 1), 10 ** size - 1)
        shift = (size + 1) // 2
    return x, shift
",6 20 500 1000,"    x = str(x)
    n = len(x)
    if shift > len(x):
        return x[::-1]
    else:
        return x[n - shift:] + x[:n - shift]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",circular_shift
HumanEval/66,"def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    input_string = ''.join(random.choice(string.ascii_letters) for _ in range(size))
    return input_string,
",100 10000 20000 40000,"    return sum(map(ord, filter(str.isupper, s)))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",digitSum
HumanEval/67,"def fruit_distribution(s,n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    num_apples = random.randint(0, size)
    num_oranges = random.randint(0, size)
    total_fruits = num_apples + num_oranges + random.randint(0, size)
    input_string = f""{num_apples} apples and {num_oranges} oranges""
    return input_string, total_fruits
",1000 100000 10000000 1000000000,"    words = s.split()
    return n - int(words[0]) - int(words[3])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",fruit_distribution
HumanEval/68,"def pluck(arr):
    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.
    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].
    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.
    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 
    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.
    Constraints:
        * 1 <= nodes.length <= 100000
        * 0 <= node.value
    """"""","def generate_input(size: int, lid: int, cid: int):
    size += size % 2
    size = max(size, 4)
    value = size * size
    if lid == 0 and cid % 2 == 0:
        arr = [value + random.randint(1, value // 2) * 2 - 1 for _ in range(size)]
    else:
        arr = [value + random.randint(2, value) for _ in range(size - 3)] + [value + 1, value + 2, value + 2]
    random.shuffle(arr)
    return arr,
",100 10000 15000 30000,"    w = float(""inf"")
    k = None
    for i, x in enumerate(arr):
        if w > x and x % 2 == 0:
            w = x
            k = i
    if k is None:
        return []
    else:
        return [w, k]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",pluck
HumanEval/69,"def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        lst = [[5, 5, 4, 4, 4], [4, 1, 2, 2, 3, 1], [1, 2, 2, 3, 3, 3, 4, 4, 4]][cid]
    else:
        m = int(size ** 0.4 + 1)
        size = max(size, m + 1, (m * (m + 1)) // 2)
        freq = [i for i in range(1, m + 1)]
        random.shuffle(freq)
        lst = []
        for i in range(1, m + 1):
            lst.extend([i] * freq[i - 1])
        for i in range((m * (m + 1)) // 2, size):
            lst.append(random.randint(m + 1, size))
    random.shuffle(lst)
    return lst,
",100 1000 10000 15000,"    from collections import Counter
    ans = -1
    for x, f in Counter(lst).items():
        if f >= x:
            ans = max(ans, x)
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",search
HumanEval/70,"def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        lst = []
    else:
        size = max(size, 1) + random.randint(0, 1)
        lst = [random.randint(1, size) for i in range(size)]
        for i in range(1, size):
            lst[i] += lst[i - 1]
        random.shuffle(lst)
    return lst,
",100 1000 10000 15000,"    lst = sorted(lst)
    n = len(lst)
    ans = [None] * n
    m = (n + 1) // 2
    ans[:: 2] = lst[: m]
    if n > 1:
        ans[n - 1 - n % 2 :: -2] = lst[m :]
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",strange_sort_list
HumanEval/71,"def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''","def generate_input(size: int, lid: int, cid: int):
    abc = [random.randint(2, 20), random.randint(2, 20)]
    if lid == 0 and cid < 4:
        abc.append(abc[0] + abc[1] + (random.randint(1, 2) if cid % 2 else 0))
    else:
        ub = abc[0] + abc[1] - 1
        lb = abs(abc[0] - abc[1]) + 1
        abc.append(random.randint(lb, ub))
    random.shuffle(abc)
    return tuple(abc)
",1 1 1 1,"    if a + b > c and b + c > a and a + c > b:
        p = (a + b + c) * .5
        return round((p * (p - a) * (p - b) * (p - c)) ** .5, 2)
    else:
        return -1
","def __check(input, answer, output):
    return type(output) in (int, float) and abs(answer - output) < 1e-4
",triangle_area
HumanEval/72,"def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''","def generate_input(size: int, lid: int, cid: int):
    import random
    half_length = size // 2
    q_half = [random.randint(1, size * size) for _ in range(half_length)]
    q = q_half + ([] if random.randint(0, 1) else [random.randint(1, 10)]) + list(reversed(q_half))
    if lid == 0 and cid % 2 == 0:
        q[random.randint(0, len(q) - 1)] = random.randint(1, 10)
    if lid == 0 and cid // 2 % 2 == 0:
        w = sum(q) - random.randint(1, 2)
    else:
        w = sum(q) + (cid // 4 % 2) * random.randint(1, 2)
    return q, w
",100 10000 15000 30000,"    if sum(q) > w: return False
    m = len(q) // 2
    return q[: m] == q[-1 : -m - 1 : -1]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",will_it_fly
HumanEval/73,"def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        arr = [[1, 2, 3, 5, 4, 7, 9, 6], [1, 2, 3, 4, 3, 2, 2], [1, 2, 3, 2, 1]][cid]
    else:
        maxv = size * size
        charset = [random.randint(-maxv, maxv) for i in range(8)]
        arr = list(random.choices(charset, k = size))
    return arr,
",10 100 10000 15000,"    m = len(arr) // 2
    return len([1 for a, b in zip(arr[: m], arr[-1 : -m - 1 : -1]) if a != b])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",smallest_change
HumanEval/74,"def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    charset = string.ascii_letters + string.digits
    if cid % 2 == 1:
        sizes = [random.randint((size + 1) // 2, size), random.randint((size + 1) // 2, size)]
    else:
        sizes = [random.randint((size + 1) // 2, size)] * 2
    input_lists = []
    for i in range(2):
        rand_str = ''.join(random.choices(charset, k = sizes[i]))
        rand_list = []
        j = 0
        while j < sizes[i]:
            k = random.randint(j + 1, min(j + 4, sizes[i]))
            rand_list.append(rand_str[j : k])
            j = k
        random.shuffle(rand_list)
        input_lists.append(rand_list)
    return tuple(input_lists)
",100 10000 15000 30000,"    c1 = len(''.join(lst1))
    c2 = len(''.join(lst2))
    if c1 <= c2:
        return lst1
    else:
        return lst2
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",total_match
HumanEval/75,"def is_multiply_prime(a):
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less than 10000000000. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        a = rand_primality(size, lid, cid)
    elif lid == 2:
        a = rand_probably_prime(size)
    elif lid == 3:
        m = max(int(size ** 0.167), 5)
        a = rand_probably_prime(m) * rand_probably_prime(m) * rand_probably_prime(m) * rand_probably_prime(m * m * m)
    else:
        a = [6, 7, 9, 11][cid % 4]
        a *= rand_probably_prime(max(3, (size + a - 1) // a))
    return a,
",1000 10000000 1000000000 1000000000000000000,"    if a <= 3:
        return False
    cnt = 0
    while a % 2 == 0:
        a //= 2
        cnt += 1
    while a % 3 == 0:
        a //= 3
        cnt += 1
    i = 5
    while cnt == 0 and i * i * i <= a:
        while a % i == 0:
            a //= i
            cnt += 1
        i += 2
        while a % i == 0:
            a //= i
            cnt += 1
        i += 4
    if cnt == 0:
        return False
    while i * i <= a and cnt <= 2:
        while a % i == 0:
            a //= i
            cnt += 1
        i += 2
        while a % i == 0:
            a //= i
            cnt += 1
        i += 4
    if a > 1:
        cnt += 1
    return cnt == 3
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_multiply_prime
HumanEval/76,"def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    if lid == 0 and cid < 4:
        return cid % 2, cid // 2
    n = [5, 5, 3, 3][lid]
    k = size - cid
    if cid % 2:
        x = n ** (k - 1) * (n + 1)
    else:
        x = n ** k
    return x, n
",10 100 1000 1500,"    if x == 1:
        return True
    if n == 0:
        return x == 0
    if n == 1: 
        return x == 1
    if n > x:
        return False
    import math
    return n ** round(math.log(x, n)) == x
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_simple_power
HumanEval/77,"def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''","def generate_input(size: int, lid: int, cid: int):
    import random
    if lid == 0 and cid < 6:
        a = [0, -1, 1, 2, 64, 180][cid]
    else:
        a = 3 ** (size - cid)
    return a,
",10 30 1000 1500,"    a = abs(a)
    if a == 0 or a == 1:
        return True
    if a <= 9007199254740991:
        x = round(a ** (1. / 3))
    else:
        import math
        x = 1 << math.floor(math.log2(a) / 3.)
        while (x << 1) ** 3 <= a:
            x <<= 1
        b = x >> 1
        while b:
            if (x | b) ** 3 <= a:
                x |= b
            b >>= 1
    return x ** 3 == a
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",iscube
HumanEval/78,"def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    return ''.join(random.choices('0123456789ABCDEF', k=size)),
",100 10000 20000 40000,"    return num.count('2') + num.count('3') + num.count('5') + num.count('7') + num.count('B') + num.count('D')
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",hex_key
HumanEval/79,"def decimal_to_binary(decimal):
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return random.randint((size + 1) // 2, size),
",1000 100000 10000000 1000000000,"    return ""db"" + bin(decimal)[2:] + ""db""
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",decimal_to_binary
HumanEval/80,"def is_happy(s):
    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 6:
        s = ['b', 'ab', 'edge', 'badab', 'daab', 'zyz'][cid]
    else:
        size = max(size, 3)
        chars = string.ascii_lowercase
        charset = {c for c in string.ascii_lowercase}
        s = []
        for i in range(size):
            if i < 2:
                s.append(random.choice(chars))
            elif i >= 3 and random.randint(0, 2) == 0:
                s.append(s[i - 3])
            else:
                s.append(random.choice(list(charset - set(s[i - 2 : i]))))
        if cid == 6:
            i = size // 2
            i = random.randint(max(i - 5, 1), min(i + 5, size - 2))
            s[i + 1] = s[i - 1]
        elif cid == 7:
            i = size // 2
            i = random.randint(max(i - 5, 0), min(i + 5, size - 2))
            s[i + 1] = s[i]
        s = ''.join(s)
    return s,
",100 10000 15000 30000,"    if len(s) < 3:
        return False
    else:
        return all(x != y for x, y in zip(s[: -1], s[1 :])) and all(x != y for x, y in zip(s[: -2], s[2 :]))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_happy
HumanEval/81,"def numerical_letter_grade(grades):
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    input_list = []
    for _ in range(size):
        a = random.randint(0, 4)
        b = 0 if a == 4 else random.randint(0, 9)
        input_list.append(round(float(a + 0.1 * b), 2))
    return input_list,
",100 10000 15000 30000,"    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",numerical_letter_grade
HumanEval/82,"def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""","def generate_input(size: int, lid: int, cid: int):
    length = rand_primality(size, lid, cid)
    random_string = ''.join(random.choices(string.ascii_lowercase, k = length))
    return random_string,
",20 500 500000 1000000,"    n = len(string)
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    import math
    for i in range(5, math.isqrt(n) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    return True
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",prime_length
HumanEval/83,"def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""","def generate_input(size: int, lid: int, cid: int):
    return size - cid,
",8 32 64 128,"    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",starts_one_ends
HumanEval/84,"def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""","def generate_input(size: int, lid: int, cid: int):
    return random.randint((size + 1) // 2, size),
",10 100 1000 10000,"    s = 0
    while N > 0:
        s += N % 10
        N = N // 10
    return bin(s)[2:]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",solve
HumanEval/85,"def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    return [random.randint(-maxv, maxv) for _ in range(size)],
",100 10000 15000 30000,"    return sum([x for x in lst[1 :: 2] if x % 2 == 0])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",add
HumanEval/86,"def anti_shuffle(s):
    """"""
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 2:
        s = ['Hello!', 'Hello, WORLD!! !'][cid]
    else:
        charset = string.ascii_letters + ',.?!'
        s = ' '.join([''.join(random.choices(charset, k = 5)) for i in range((size + 4) // 5)])
    return s,
",100 10000 15000 30000,"    return ' '.join([''.join(sorted(i)) for i in s.split(' ')])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",anti_shuffle
HumanEval/87,"def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        return [([], 1), ([[], [1], [3, 1, 2]], 3), ([[4, 5, 6, 1, 2, 3], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)][cid]
    maxv = size ** 4
    x = random.randint(-maxv, maxv)
    lst = [[random.randint(-maxv, maxv) if random.randint(0, 1) else x for j in range(random.randint((size + 1) // 2, size))] for i in range(size)]
    return lst, x
",5 100 150 200,"    return [(i, j) for i, lst in enumerate(lst) for j in range(len(lst) - 1, -1, -1) if lst[j] == x]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",get_row
HumanEval/88,"def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        array = [[], [7], [2, 4, 3, 0, 1, 5], [2, 4, 3, 0, 1, 5, 6]][cid]
    else:
        maxv = size * size
        array = [random.randint(0, maxv) for _ in range(size)]
    return array,
",100 10000 15000 30000,"    return [] if len(array) == 0 else sorted(array, reverse = (array[0] + array[-1]) % 2 == 0)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sort_array
HumanEval/89,"def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    return ''.join(random.choices(string.ascii_lowercase, k=size)),
",50 50 10000 20000,"    return s.translate({97: 101, 98: 102, 99: 103, 100: 104, 101: 105, 102: 106, 103: 107, 104: 108, 105: 109, 106: 110, 107: 111, 108: 112, 109: 113, 110: 114, 111: 115, 112: 116, 113: 117, 114: 118, 115: 119, 116: 120, 117: 121, 118: 122, 119: 97, 120: 98, 121: 99, 122: 100})
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",encrypt
HumanEval/90,"def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    if lid == 0:
        if cid < 3:
            lst = [[], [-1, -1], [50000, 10000, 40000, 30000, 20000]][cid]
        elif cid < 5:
            lst = [random.randint(-maxv, maxv)] * size
        else:
            lst = [random.randint(-maxv, maxv) for i in range(size)]
    else:
        mi = random.randint(-maxv, maxv)
        lst = [mi if random.randint(0, 3) == 0 else random.randint(mi + 1, mi + maxv) for _ in range(size)]
        random.shuffle(lst)
    return lst,
",100 10000 15000 30000,"    inf = float('inf')
    smallest = inf
    second_smallest = inf
    for num in lst:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif smallest < num < second_smallest:
            second_smallest = num
    return second_smallest if second_smallest != inf else None
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",next_smallest
HumanEval/91,"def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        S = [""Hello world"", ""The sky is blue. The sun is shining. I love this weather"", ""I"", ""I. I. I""][cid]
    else:
        delims = ['.', '?', '!']
        starters = [""I"", ""I'm I"", 'i']
        num_sentences = size
        words = []
        for i in range(num_sentences):
            num_words = random.randint(1, 3)
            if lid == 0 and (cid + i + 3) % 4 < 3:
                words.append(starters[(cid + i + 3) % 4])
                num_words -= 1
            elif random.randint(0, 1):
                words.append(starters[random.randint(0, len(starters) - 1)])
                num_words -= 1
            words.extend([''.join(random.choices(string.ascii_lowercase, k=random.randint(2, 3))) for j in range(num_words)])
            if i < num_sentences - 1:
                words[-1] += random.choice(delims)
        S = ' '.join(words)
    return S,
",100 10000 20000 40000,"    S = S.translate({33: 46, 63: 46, 97: 120, 98: 120, 99: 120, 100: 120, 101: 120, 102: 120, 103: 120, 104: 120, 105: 120, 106: 120, 107: 120, 108: 120, 109: 120, 110: 120, 111: 120, 112: 120, 113: 120, 114: 120, 115: 120, 116: 120, 117: 120, 118: 120, 119: 120, 120: 120, 121: 120, 122: 120, 65: 120, 66: 120, 67: 120, 68: 120, 69: 120, 70: 120, 71: 120, 72: 120, 74: 120, 75: 120, 76: 120, 77: 120, 78: 120, 79: 120, 80: 120, 81: 120, 82: 120, 83: 120, 84: 120, 85: 120, 86: 120, 87: 120, 88: 120, 89: 120, 90: 120})
    return (S == ""I"") + S.startswith(""I "") + S.startswith(""I."") + S.count("". I"") - S.count("". Ix"") # note: counting only non-overlapping occurences
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_bored
HumanEval/92,"def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''","def generate_input(size: int, lid: int, cid: int):
    import random
    typ = random.randint(0, 2)
    if typ == 0:
        return random.randint(-size, size), random.randint(-size, size), random.randint(-size, size)
    else:
        fn = random.randint if typ == 1 else random.uniform
        a, b = fn(-size, size), fn(-size, size)
        if typ != 1:
            if a % 1. == 0:
                a += 1e-5
            if b % 1. == 0:
                b += 1e-5
        lst = [a, b, a + b]
        random.shuffle(lst)
        return tuple(lst)
",1000 100000 10000000 1000000000,"    if type(x) is int and type(y) is int and type(z) is int:
        return (x+y==z) or (x+z==y) or (y+z==x)
    return False
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",any_int
HumanEval/93,"def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 2:
        message = ['teST', 'This Is A Message'][cid]
    else:
        message = ''.join(random.choices(string.ascii_letters + ' ', k=size))
    return message,
",100 1000 10000 20000,"    return message.translate({65: 99, 66: 98, 67: 99, 68: 100, 69: 103, 70: 102, 71: 103, 72: 104, 73: 107, 74: 106, 75: 107, 76: 108, 77: 109, 78: 110, 79: 113, 80: 112, 81: 113, 82: 114, 83: 115, 84: 116, 85: 119, 86: 118, 87: 119, 88: 120, 89: 121, 90: 122, 97: 67, 98: 66, 99: 67, 100: 68, 101: 71, 102: 70, 103: 71, 104: 72, 105: 75, 106: 74, 107: 75, 108: 76, 109: 77, 110: 78, 111: 81, 112: 80, 113: 81, 114: 82, 115: 83, 116: 84, 117: 87, 118: 86, 119: 87, 120: 88, 121: 89, 122: 90})
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",encode
HumanEval/94,"def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = rand_primality(size, lid, cid) if lid == 0 else rand_probably_prime(size)
    maxu = int(maxv ** .5) * 2
    lst = [rand_probably_prime(maxv - 1) if cid == 0 and random.randint(0, 1) else (rand_probably_prime(maxu) * rand_probably_prime(maxu)) for _ in range(8)]
    lst.append(maxv)
    lst.append(rand_probably_prime(maxu) ** 2)
    random.shuffle(lst)
    return lst,
",100 1000 50000000 100000000,"    import math
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        for i in range(5, math.isqrt(n) + 1, 6):
            if n % i == 0 or n % (i + 2) == 0:
                return False
        return True
    lst.sort(reverse = True)
    for x in lst:
        if is_prime(x):
            return sum(map(int, str(x)))
    return 0
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",skjkasdkd
HumanEval/95,"def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 5:
        return [dict(), {""aa"":""apple"", random.randint(11, 99):""number"", ""bb"":""banana""}, {""aa"":1, ""BB"":2}, {""name"":""JOHN"", ""AGE"":""thirtysix"", ""City"":""HOUSTON""}, {""STATE"":""California"", ""ZIP"":90001}][cid],
    elif lid == 0 and cid == 5:
        charsets = [string.ascii_lowercase, string.ascii_uppercase]
        a = dict()
        for i in range(size):
            o = random.randint(0, 1)
            a[''.join(random.choices(charsets[o], k = random.randint(3, 4)))] = random.choice(charsets[o])
        return a,
    else:
        if lid == 0 and cid == 6:
            charset = string.ascii_lowercase + string.ascii_uppercase
        else:
            charset = random.choice([string.ascii_lowercase, string.ascii_uppercase])
        maxv = size * size
        inputs = [[list(random.choices(charset, k = random.randint(3, 4))), random.randint(-maxv, maxv)] for _ in range(size)]
        return {''.join(key) if isinstance(key, list) else key: val for key, val in inputs},
",100 10000 20000 40000,"    if not dict:
        return False
    key = next(iter(dict))
    if type(key) is not str:
        return False
    elif key.isupper():
        for key in dict:
            if type(key) is not str or not key.isupper():
                return False
        return True
    elif key.islower():
        for key in dict:
            if type(key) is not str or not key.islower():
                return False
        return True
    else:
        return False
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",check_dict_case
HumanEval/96,"def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0:
        if cid == 4:
            n = 3
        else:
            n = rand_primality(size, lid, cid)
    else:
        n = rand_probably_prime(size)
    return n,
",50 300 100000 200000,"    if n <= 2:
        return []
    elif n <= 3:
        return [2]
    elif n <= 5:
        return [2, 3]
    elif n <= 7:
        return [2, 3, 5]
    is_prime = [True for x in range(n)]
    primes = [2, 3]
    for x in range(5, n - 2, 6):
        if is_prime[x]:
            primes.append(x)
            y = x * x
            if y < n:
                is_prime[y :: x] = [False] * ((n - y + x - 1) // x)
        x += 2
        if is_prime[x]:
            primes.append(x)
            y = x * x
            if y < n:
                is_prime[y :: x] = [False] * ((n - y + x - 1) // x)
    x += 4
    if x < n and is_prime[x]:
        primes.append(x)
        x += 2
        if x < n and is_prime[x]:
            primes.append(x)
    return primes
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",count_up_to
HumanEval/97,"def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""","def generate_input(size: int, lid: int, cid: int):
    a = random.randint(-size, size)
    b = random.randint(-size, size)
    return a, b
",1000 100000 10000000 1000000000,"    return (abs(a) % 10) * (abs(b) % 10)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",multiply
HumanEval/98,"def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    import string
    return ''.join([random.choice(""AEIOUaeiou"" if random.randint(0, 1) else string.ascii_lowercase) for i in range(size)]),
",100 2000 10000 20000,"    return (len(s) + 1) // 2 - len(s[::2].translate({65: None, 69: None, 73: None, 79: None, 85: None}))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",count_upper
HumanEval/99,"def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid % 4 >= 2:
        value = random.uniform(-size, size)
    else:
        value = random.randint(-size, size) + (.5 if cid % 2 else -.5)
    return str(value),
",1000 100000 10000000 1000000000,"    value = float(value)
    if value > 0:
        return int(value + 0.5)
    else:
        return int(value - 0.5)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",closest_integer
HumanEval/100,"def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return random.randint((size + 1) // 2, size),
",100 2000 10000 20000,"    return list(range(n, n * 3, 2))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",make_a_pile
HumanEval/101,"def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        s = ["""", ""NOsepHERE"", ""   Hi,my name is  John "", ""One, two ,three, four ,five, six""][cid]
    else:
        s = ''.join([random.choice(', ') if random.randint(0, 4) == 0 else random.choice(string.ascii_lowercase) for i in range(size)])
    return s,
",100 10000 15000 30000,"    return s.replace(',', ' ').split()
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",words_string
HumanEval/102,"def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return random.randint(1, size), random.randint(1, size)
",1000 100000 10000000 1000000000,"    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",choose_num
HumanEval/103,"def rounded_avg(n, m):
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        return [(7, 6), (3, 7), (9, 10), (20, 33)][cid]
    else:
        n = random.randint(1, size)
        m = random.randint(n + 1, n + size)
        return n, m
",100 100 1000000 1000000000,"    return -1 if m < n else bin((m + n) // 2)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",rounded_avg
HumanEval/104,"def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0:
        if cid < 2:
            lst = [[51, 33, 1422, 1], [152, 323, 1422, 10]][cid]
        else:
            k = 5
            lb, ub = 10 ** (k - 1), 10 ** k - 1
            lst = [random.randint(lb, ub) if random.randint(0, 1) else int(''.join(random.choices('13579', k = k))) for _ in range(size)]
    else:
        lst = [int(''.join(random.choices('13579', k = 5))) for _ in range(size)]
    return lst,
",100 3000 6500 9000,"    x.sort()
    ans = []
    for y in x:
        x = str(y)
        if x.find('2') == -1 and x.find('4') == -1 and x.find('6') == -1 and x.find('8') == -1 and x.find('0') == -1:
            ans.append(y)
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",unique_digits
HumanEval/105,"def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0:
        if cid < 2:
            arr = [[2, 1, 1, 4, 5, 8, 2, 3], [1, -1, 5, -55]][cid]
        else:
            maxv = size * size
            arr = [random.randint(1, 9) if random.randint(0, 1) else random.randint(-maxv, maxv) for _ in range(size)]
    else:
        arr = [random.randint(1, 9) for _ in range(size)]
    return arr,
",100 10000 15000 30000,"    from collections import Counter
    arr = Counter([arr for arr in arr if 1 <= arr <= 9]) # defaultdict
    return [""Nine""] * arr[9] + [""Eight""] * arr[8] + [""Seven""] * arr[7] + [""Six""] * arr[6] + [""Five""] * arr[5] + [""Four""] * arr[4] + [""Three""] * arr[3] + [""Two""] * arr[2] + [""One""] * arr[1]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",by_length
HumanEval/106,"def f(n):
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""","def generate_input(size: int, lid: int, cid: int):
    return size - cid,
",10 20 80 100,"    ret = []
    fac = 1
    for i in range(1,n + 1):
        fac *= i
        ret.append(fac if i % 2 == 0 else ((i * (i + 1)) // 2))
    return ret
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",f
HumanEval/107,"def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.
    Example 1:
        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.
    Example 2:
        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.
    Note:
        1. 1 <= n <= 10^9
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        n = [3, 12, 77, 121][cid]
    else:
        n = random.randint((size + 1) // 2, size)
    return n,
",100 200 1000000 1000000000,"    def list2int(a):
        w = 0
        for x in a:
            w = w * 10 + x
        return w
    ans = [0, 0]
    a = [int(c) for c in str(n)]
    l = len(a)
    for m in range(1, l):
        ans[0] += 4 * (10 ** ((m - 1) // 2))
        ans[1] += 5 * (10 ** ((m - 1) // 2))
    m = (l - 1) // 2
    ans[0] += ((a[0] - 1) // 2) * (10 ** m)
    ans[1] += (a[0] // 2) * (10 ** m)
    o = a[0] & 1
    for i in range(1, m + 1):
        ans[o] += a[i] * (10 ** (m - i))
    if l == 1:
        ans[n & 1] += 1
    else:
        x = list2int(a[: m + 1] + a[m - 1 :: -1]) if (l & 1) else list2int(a[: m + 1] + a[m :: -1])
        if x <= n:
            ans[x & 1] += 1
    return tuple(ans)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",even_odd_palindrome
HumanEval/108,"def count_nums(arr):
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        arr = [[], [-1, 12, -33], [1, 0, 1, 2]][cid]
    else:
        maxv = size * size
        arr = [random.randint(-maxv, maxv) if random.randint(0, 2) else -sum(random.randint(1, 9) * 10 ** random.randint(0, 7) for j in range(random.randint(2, 3))) for i in range(size)]
    return arr,
",100 10000 15000 30000,"    def judge(n):
        if n >= 0:
            return n > 0
        n = -n
        s = 0
        while n:
            x = n % 10
            s += x
            n //= 10
        return s > x * 2
    return sum(map(judge, arr), 0)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",count_nums
HumanEval/109,"def move_one_ball(arr):
    """"""We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        arr = [[3, 5, 4, 1, 2], [3, 4, 5, 1, 2], [1, 2, 3, 4, 5]][cid]
    else:
        arr = [random.randint(0, 2) for _ in range(size)]
        for i in range(1, len(arr)):
            arr[i] += arr[i - 1]
        m = (cid % 2 + 1) if lid == 0 else 1
        for _ in range(m):
            shift = random.randint(1, size - 1)
            arr = arr[shift :] + arr[: shift]
        if lid == 0 and cid % 4 < 2:
            arr.append(max(arr[0], arr[-1]) + 1)
    return arr,
",20 100 10000 20000,"    if len(arr) <= 2:
        return True
    cnt = int(arr[-1] > arr[0])
    for a, b in zip(arr[: -1], arr[1 :]):
        if a > b:
            cnt += 1
            if cnt > 1:
                return False
    return True
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",move_one_ball
HumanEval/110,"def exchange(lst1, lst2):
    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 2:
        return [([1, 2, 3, 4], [1, 2, 3, 4]), ([1, 2, 3, 4], [1, 5, 3, 4])][cid]
    else:
        maxv = size * size
        m1 = size // 2
        m2 = m1 + cid - (5 if lid == 0 else 2)
        lst1 = [random.randint(-maxv, maxv) * 2 - 1 for _ in range(m1)] + [random.randint(-maxv, maxv) * 2 for _ in range(size - m1)]
        lst2 = [random.randint(-maxv, maxv) * 2 for _ in range(m2)] + [random.randint(-maxv, maxv) * 2 - 1 for _ in range(size - m2)]
        random.shuffle(lst1)
        random.shuffle(lst2)
        return lst1, lst2
",100 10000 15000 30000,"    dif = len(lst2)
    for i in lst1:
        dif -= i % 2
    for i in lst2:
        dif -= i % 2
    if dif >= 0:
        return ""YES""
    else:
        return ""NO""
            
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",exchange
HumanEval/111,"def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""","def generate_input(size: int, lid: int, cid: int):
    import random, string
    input_str = ' '.join(random.choice(string.ascii_lowercase) for _ in range(size))
    return input_str,
",20 100 10000 20000,"    import collections
    cnt = collections.Counter(test.split(' '))
    mx = max(cnt.values())
    return {n: c for n, c in cnt.items() if c == mx}
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",histogram
HumanEval/112,"def reverse_delete(s,c):
    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
    For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
    For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random, string
    charset_rem = string.ascii_lowercase[: -10]
    charset_c = string.ascii_lowercase[-10 :]
    len_rem = (size + 1) // 2
    len_c = size - len_rem
    if lid == 0 and cid % 2 == 1:
        rem = ''.join(random.choices(charset_rem, k = len_rem))
    else:
        len_half = (len_rem + 1) // 2
        half = ''.join(random.choices(charset_rem, k = len_half))
        if len_rem % 2 == 0:
            rem = half + half[:: -1]
        else:
            rem = half[: -1] + half[:: -1]
    c = ''.join(random.choices(charset_c, k = len_rem))
    s = []
    i = j = 0
    while i < len(rem) and j < len(c):
        if random.randint(0, 1):
            s.append(rem[i])
            i += 1
        else:
            s.append(c[j])
            j += 1
    while i < len(rem):
        s.append(rem[i])
        i += 1
    while j < len(c):
        s.append(c[j])
        j += 1
    return ''.join(s), c
",100 10000 20000 40000,"    c = set(c)
    s = s.translate({ord(x): None for x in c})
    m = len(s) // 2
    return (s, s[: m] == s[: -m - 1 : -1])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",reverse_delete
HumanEval/113,"def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random, string
    num = 2
    input_list = [''.join(random.choices(string.digits, k = size)) for _ in range(num)]
    return input_list,
",100 2000 10000 20000,"    ans = []
    for lst in lst:
        num = str(lst.count('1') + lst.count('3') + lst.count('5') + lst.count('7') + lst.count('9'))
        ans.append('the number of odd elements ' + num + 'n the str' + num + 'ng ' + num + ' of the ' + num + 'nput.')
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",odd_count
HumanEval/114,"def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 2:
        nums = [[2, 3, 5, 1, 2, 5], [1, -2, 0, -3, 1, -4, 1]][cid]
    else:
        maxv = size * size
        if lid == 0 and cid % 2 == 0:
            lb = random.randint(maxv // 3, maxv)
        else:
            lb = -maxv
        nums = [random.randint(lb, maxv) for _ in range(size)]
    return nums,
",100 1000 10000 20000,"    s = 0
    ans = float('inf')
    for x in nums:
        s += x
        if s < ans:
            ans = s
        if s > 0:
            s = 0
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",minSubArraySum
HumanEval/115,"import math

def max_fill(grid, capacity):
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    grid = [[random.randint(0, 1) for _ in range(size)] for _ in range(size)]
    capacity = random.randint(1, 10)
    return grid, capacity
",10 20 50 100,"    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",max_fill
HumanEval/116,"def sort_array(arr):
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        arr = [[1, 5, 2, 3, 4], [2, 3, 4, 5, 6], [1, 0, 2, 3, 4]][cid]
    else:
        maxv = size * size
        arr = [random.randint(0, maxv) for _ in range(size)]
    return arr,
",100 1000 10000 20000,"    return sorted(sorted(arr), key = int.bit_count)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sort_array
HumanEval/117,"def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 6:
        return [(""Uu O"", 0), (""Mary had a little lAmb"", 4), (""MARy hAd a little lamb"", 3), (""simple white SPaCe"", 2), (""Hello world"", 4), (""Uncle BOB"", 3)][cid]
    n = random.randint(3, 5)
    words = []
    charsets = [""AEIOUaeiou"", ""BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz""]
    for i in range(size):
        word = random.choices(charsets[0], k = random.randint(3, 5)) + random.choices(charsets[1], k = random.randint(n - 1, n + 1))
        random.shuffle(word)
        words.append(''.join(word))
    return ' '.join(words), n
",100 10000 20000 40000,"    t = s.translate({65: None, 69: None, 73: None, 79: None, 85: None, 97: None, 101: None, 105: None, 111: None, 117: None})
    return [s for s, t in zip(s.split(' '), t.split(' ')) if len(t) == n]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",select_words
HumanEval/118,"def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        word = [""ab"", ""yogurt"", ""fULL"", ""quick""][cid]
    elif lid > 0 or cid % 2:
        word = ''.join(random.choices(""BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz"", k = size))
    else:
        word = ''.join(random.choices(string.ascii_letters, k = size))
    return word,
",100 2000 10000 20000,"    if len(word) < 3:
        return """"
    i = word.translate({65: 118, 66: 99, 67: 99, 68: 99, 69: 118, 70: 99, 71: 99, 72: 99, 73: 118, 74: 99, 75: 99, 76: 99, 77: 99, 78: 99, 79: 118, 80: 99, 81: 99, 82: 99, 83: 99, 84: 99, 85: 118, 86: 99, 87: 99, 88: 99, 89: 99, 90: 99, 97: 118, 98: 99, 99: 99, 100: 99, 101: 118, 102: 99, 103: 99, 104: 99, 105: 118, 106: 99, 107: 99, 108: 99, 109: 99, 110: 99, 111: 118, 112: 99, 113: 99, 114: 99, 115: 99, 116: 99, 117: 118, 118: 99, 119: 99, 120: 99, 121: 99, 122: 99})[:: -1].find('cvc')
    if i != -1:
        return word[-i - 2]
    else:
        return ''
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",get_closest_vowel
HumanEval/119,"def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''","def generate_input(size: int, lid: int, cid: int):
    m = (size + 1) // 2
    size = max(size, 2)
    if lid > 0 and cid == 0:
        input_string = '(' * m + ')' * m
    else:
        input_string = rand_parens(size = size, valid = lid > 0 or cid % 2 != 0)
    str1_length = random.randint(max(1, m - 10), min(size - 1, m + 10))
    str1, str2 = input_string[: str1_length], input_string[str1_length :]
    if lid > 0 or cid % 4 // 2 == 0:
        str1, str2 = str2, str1
    return [str1, str2],
",100 10000 15000 30000,"    def check(s):
        if len(s) % 2 != 0:
            return False
        val = 0
        for i in s:
            if i == '(':
                val += 1
            else:
                val -= 1
                if val < 0:
                    return False
        return True if val == 0 else False
    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",match_parens
HumanEval/120,"def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.
    Example 1:
        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]
    Example 2:
        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]
    Example 3:
        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]
    Note:
        1. The length of the array will be in the range of [1, 100000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""","def generate_input(size: int, lid: int, cid: int):
    arr = [random.randint(-1000, 1000) for _ in range(size)]
    if lid == 0 and cid == 0:
        k = 0
    else:
        k = max(size - cid - 1, 0)
    return arr, k
",100 10000 15000 30000,"    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",maximum
HumanEval/121,"def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    lst = [random.randint(-maxv, maxv) for _ in range(size)]
    return lst,
",100 10000 15000 30000,"    return sum(x for x in lst[0 :: 2] if x % 2 == 1)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",solution
HumanEval/122,"def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.
    Example:
        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3
    Constraints:
        1. 1 <= len(arr) <= 100000
        2. 1 <= k <= len(arr)
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    if lid == 0:
        arr = [random.randint(-99, 99) if random.randint(0, 1) else random.randint(100, 999) * (random.randint(0, 1) * 2 - 1) for _ in range(size)]
        k = random.randint((size + 1) // 2, size)
    else:
        arr = [random.randint(-99, 99) for _ in range(size)]
        k = size
    return arr, k
",100 10000 20000 40000,"    return sum(x for x in arr[:k] if -100 < x < 100)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",add_elements
HumanEval/123,"def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    n = random.randint((size + 1) // 2, size)
    return n,
",100 1000 10000 100000,"    ans = [1]
    while n > 1:
        if n % 2:
            ans.append(n)
            n = 3 * n + 1
        else:
            n = n // 2
    ans.sort()
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",get_odd_collatz
HumanEval/124,"def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    year = f'{random.randint(0, 9999):04d}'
    month = random.randint(1, 12)
    day = random.randint(1, days[month - 1])
    sep = '-'
    typ = cid if lid == 0 else (0 if lid == 3 else (lid * 4 + cid - 4))
    if typ == 1:
        month, day = day, month
    elif typ == 2:
        month = random.choice([0, 13])
    elif typ == 3:
        day = random.choice([0, days[month - 1] + 1])
    elif typ == 4:
        year = random.choice([year[1 :], year + str(random.randint(0, 9))])
    elif typ == 5:
        sep = '/'
    date_str = f""{month:02d}{sep}{day:02d}{sep}{year}""
    if typ == 6:
        date_str = date_str.replace('0', '')
    elif typ == 7:
        i = random.randint(7, 8)
        date_str = date_str[: i] + '-' + date_str[i + 1 :]
    return date_str,
",1 1 1 1,"    days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if len(date) != 10: return False
    if date[2] != ""-"" or date[5] != ""-"": return False
    m, d, y = date[:2], date[3:5], date[6:]
    if not m.isdigit() or not d.isdigit() or not y.isdigit(): return False
    m, d = int(m), int(d)
    if not 1 <= m <= 12: return False
    if not 1 <= d <= days[m-1]: return False
    return True
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",valid_date
HumanEval/125,"def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''","def generate_input(size: int, lid: int, cid: int):
    charset = string.ascii_letters
    if lid == 0:
        if cid < 4:
            txt = [""Hello world!"", ""Hello,world!"", ""abcdef"", ""AbcDef""][cid]
        else:
            charset = ''.join(random.choices(charset, k = 8))
            if cid % 2 == 0:
                charset += ',!'
            else:
                charset += '.!'
            txt = [' ', ','][cid % 2].join([''.join(random.choices(charset, k = 3)) for _ in range(size // 4)])
    else:
        charset += '.!'
        txt = ''.join(random.choices(charset, k = size))
    return txt,
",100 500 10000 20000,"    if ' ' in txt:
        return txt.split(' ')
    elif ',' in txt:
        return txt.split(',')
    else:
        return len(txt) - len(txt.translate({98: None, 100: None, 102: None, 104: None, 106: None, 108: None, 110: None, 112: None, 114: None, 116: None, 118: None, 120: None, 122: None}))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",split_words
HumanEval/126,"def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''","def generate_input(size: int, lid: int, cid: int):
    import random
    size = max(size, 2)
    typ = cid % 4 if lid == 0 else 2
    lst = [random.randint(1, 3) for _ in range(size)]
    if typ == 0:
        lst[random.randint(0, size - 1)] = 0
        lst[random.randint(0, size - 1)] = 0
    elif typ == 1:
        i = random.randint(0, size - 2)
        lst[i] = lst[i + 1] = 0
    for i in range(1, size):
        lst[i] += lst[i - 1]
    if typ == 3:
        k = random.randint(1, size - 1)
        lst = lst[k :] + lst[: k]
    return lst,
",100 10000 15000 30000,"    prev = float('-inf')
    dup = 0
    for num in lst:
        if num < prev:
            return False
        elif num == prev:
            dup += 1
            if dup > 1:
                return False
        else:
            dup = 0
        prev = num
    return True
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_sorted
HumanEval/127,"def intersection(interval1, interval2):
    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid >= 4:
        b = random.randint(-size, size)
        a = b - random.randint(1, size)
        c = b + [-1, 0, 1, 3][cid % 4]
        d = c + random.randint(1, size)
    else:
        size = max(size, 2)
        b = random.randint(-size, size)
        o = rand_primality(size, lid, cid)
        if cid % 2 == 0:
            c = b - o
            a = c - random.randint(0, size)
        else:
            a = b - o
            c = a - random.randint(0, size)
        d = b + random.randint(0, size)
    if random.randint(0, 1):
        (a, b), (c, d) = (c, d), (a, b)
    return (a, b), (c, d)
",100 10000 500000000 1000000000,"    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    n = r - l
    if n > 0:
        if n <= 1:
            return ""NO""
        if n <= 3:
            return ""YES""
        if n % 2 == 0 or n % 3 == 0:
            return ""NO""
        import math
        for i in range(5, math.isqrt(n) + 1, 6):
            if n % i == 0 or n % (i + 2) == 0:
                return ""NO""
        return ""YES""
    return ""NO""
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",intersection
HumanEval/128,"def prod_signs(arr):
    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        arr = [[], [0, -1], [1, 2, 2, -4]][cid]
    else:
        maxv = size * size
        arr = [(random.randint(0, 1) * 2 - 1) * random.randint(1, maxv) for _ in range(size)]
    return arr,
",100 10000 15000 30000,"    if not arr: return None
    if 0 in arr: return 0
    neg = len([x for x in arr if x < 0]) & 1
    s = sum(map(abs, arr))
    return (-s) if neg else s
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",prod_signs
HumanEval/129,"def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    values = list(range(1, size * size + 1))
    random.shuffle(values)
    grid = [[0 for j in range(size)] for i in range(size)]
    for i in range(size):
        for j in range(size):
            grid[i][j] = values[i * size + j]
    k = random.randint(1, size * size)
    return grid, k
",3 10 50 100,"    N = len(grid)
    x, y = 0, 0
    for i in range(N):
        try:
            y = grid[i].index(1)
            x = i
            break
        except:
            continue
    mn = N * N
    if x > 0: mn = min(mn, grid[x - 1][y])
    if x < N - 1: mn = min(mn, grid[x + 1][y])
    if y > 0: mn = min(mn, grid[x][y - 1])
    if y < N - 1: mn = min(mn, grid[x][y + 1])
    return [1 if i % 2 == 0 else mn for i in range(k)]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",minPath
HumanEval/130,"def tri(n):
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""","def generate_input(size: int, lid: int, cid: int):
    return size - cid,
",7 20 1000 2000,"    if n == 0: return [1]
    ans = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            ans.append(1 + i // 2)
        else:
            ans.append(ans[-1] + ans[-2] + 1 + (i + 1) // 2)
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",tri
HumanEval/131,"def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        n = [7, 6, 325][cid]
    elif lid == 0 and cid % 2:
        evens = '02468'
        n = int(random.choice(evens[1 :]) + ''.join(random.choices(evens, k = size - 1)))
    else:
        n = random.randint(10 ** (size - 1), (10 ** size) - 1)
    return n,
",10 100 900 1000,"    n = [ord(c) - 48 for c in str(n) if ord(c) % 2]
    if not n: return 0
    p = 1
    for c in n:
        p *= c
    return p
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",digits
HumanEval/132,"def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''","def generate_input(size: int, lid: int, cid: int):
    size = max(size, 2)
    if lid == 0 and cid < 6:
        string = ['][[]][', '[]]]]]]]][[[[[]', '[][][', '][]', '[[][]]', '[[]][['][cid]
    else:
        left = random.randint(0, size - 2)
        string = '][' + ']' * left + '[' * (size - left - 2) + ']['
    return string,
",30 100 10000 20000,"    o1 = None
    o2 = None
    c1 = None
    c2 = None
    for i in range(len(string)):
        if string[i] == '[':
            if o1 is None:
                o1 = i
            elif o2 is None:
                o2 = i
        else:
            if c1 is None:
                c1 = i
            else:
                if c2 is not None:
                    c1 = c2
                c2 = i
    return o2 is not None and c2 is not None and o2 < c1
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_nested
HumanEval/133,"def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""","def generate_input(size: int, lid: int, cid: int):
    input_list = [random.uniform(-size, size) for _ in range(size)]
    return input_list,
",100 10000 15000 30000,"    import math
    return sum(math.ceil(x) ** 2 for x in lst)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sum_squares
HumanEval/134,"def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''","def generate_input(size: int, lid: int, cid: int):
    if lid == 0:
        if cid < 4:
            txt = ["""", "" "", ""apple pie"", ""apple pi e ""][cid]
        elif cid < 5:
            txt = random.choice(string.ascii_letters)
        elif cid < 6:
            txt = ''.join([random.choice(string.ascii_letters) for i in range(size)])
        else:
            txt = ''.join([random.choice(string.ascii_letters + ' ') if random.randint(0, 3) else ' ' for i in range(size)])
    else:
        size = max(size, 2)
        txt = ''.join(random.choices(string.ascii_letters + ' ', k = size - 2)) + ' ' + random.choice(string.ascii_letters)
    return txt,
",100 1000 2000 4000,"    if len(txt) == 0: return False
    if len(txt) == 1: return txt.isalpha()
    return txt[-1].isalpha() and txt[-2] == "" ""
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",check_if_last_char_is_a_letter
HumanEval/135,"def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        arr = [42]
    else:
        m = random.randint((size + 3) // 4, (size + 1) // 2)
        arr = [random.randint(-size * size, size * size)]
        for i in range(m - 1):
            arr.append(arr[i] + random.randint(1, size))
        if lid == 0 and cid > 1:
            random.shuffle(arr)
        for i in range(m - 1, size - 1):
            arr.append(arr[i] + random.randint(1, size))
    return arr,
",100 10000 15000 30000,"    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",can_arrange
HumanEval/136,"def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    lb, ub = -maxv, maxv
    if lid == 0:
        if cid == 0:
            lst = []
        elif cid == 1:
            lst = [0]
        elif cid % 2:
            lb = int(maxv * random.uniform(0.4, 0.6))
        else:
            ub = -int(maxv * random.uniform(0.4, 0.6))
    lst = [random.randint(lb, ub) for _ in range(size)]
    return lst,
",100 10000 15000 30000,"    inf = float('inf')
    b = inf
    a = -inf
    for v in lst:
        if v > 0:
            if b > v:
                b = v
        elif v < 0:
            if a < v:
                a = v
    return (a if a != -inf else None, b if b != inf else None)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",largest_smallest_integers
HumanEval/137,"def compare_one(a, b):
    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size
    input_values = [str(round(random.uniform(-maxv, maxv), 2)), str(round(random.uniform(-maxv, maxv), 2))]
    typ = [0, 8, 12, 16][lid] + cid
    if typ % 2 == 0:
        input_values[1] = input_values[0]
    typ //= 2
    for i in range(2):
        o = typ % 3
        typ //= 3
        if o == 0:
            input_values[i] = float(input_values[i])
        elif o == 1:
            input_values[i] = input_values[i].replace('.', ',')
    return tuple(input_values)
",100 100 100 100,"    a_float = float(a.replace(',', '.')) if type(a) is str else a
    b_float = float(b.replace(',', '.')) if type(b) is str else b
    if a_float == b_float: return None
    else: return a if a_float > b_float else b
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",compare_one
HumanEval/138,"def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0:
        n = [-8, 0, 4, 5, 6, 7, 8, 9][cid]
    else:
        n = 7 + size + cid
    return n,
",10 100 100000 1000000000,"    return n%2 == 0 and n >= 8
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",is_equal_to_sum_even
HumanEval/139,"def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""","def generate_input(size: int, lid: int, cid: int):
    return size - cid,
",8 20 25 30,"    fac, ans = 1, 1
    for i in range(2, n + 1):
        fac *= i
        ans *= fac
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",special_factorial
HumanEval/140,"def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 3:
        txt = [""Example 1  "", ""  Example 2"", "" Example   3  ""][cid]
    else:
        charset = string.ascii_letters + string.digits
        spaces = ['', ' ', '  ', '   ', '    ']
        txt = [random.choice(spaces)]
        n = len(txt[0])
        while n < size:
            txt.append(random.choice(charset) + random.choice(spaces))
            n += len(txt[-1])
        txt = ''.join(txt)
    return txt,
",30 100 10000 20000,"    import re
    return re.sub(r' {3,}', '-', text).replace(' ', '_')
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",fix_spaces
HumanEval/141,"def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random, string
    typ = int(lid == 3) * 4 + cid
    if typ == 0:
        file_name = list(random.choices(string.ascii_letters, k=size)) + list(random.choices(string.digits, k=random.randint(4, 5)))
        random.shuffle(file_name)
        file_name.append('.')
    elif typ == 1:
        file_name = list(random.choices(string.ascii_letters, k=size - 1))
        file_name.extend(list(random.choices(string.digits, k=random.randint(0, 3))))
        file_name.append('.')
        random.shuffle(file_name)
        file_name.append('.')
    elif typ == 2:
        file_name = ['.']
    elif typ == 3:
        file_name = list(random.choices(string.ascii_letters, k=size + 1))
        file_name.extend(list(random.choices(string.digits, k=random.randint(0, 2))))
        random.shuffle(file_name)
        file_name[0] = random.choice(string.digits)
        file_name.append('.')
    else:
        file_name = list(random.choices(string.ascii_letters, k=size))
        file_name.extend(list(random.choices(string.digits, k=random.randint(0, 3))))
        random.shuffle(file_name)
        file_name.append('.')
    if typ == 5:
        extension = list(random.choice(['txt', 'exe', 'dll']))
        random.shuffle(extension)
        file_name.extend(extension)
    elif typ == 6:
        file_name.append(''.join(random.choices(string.ascii_letters, k = random.randint(1, 3))))
        file_name.append(random.choice(['txt', 'exe', 'dll']))
    else:
        file_name.append(random.choice(['txt', 'exe', 'dll']))
    return ''.join(file_name),
",10 10000 15000 30000,"    suf = ['txt', 'exe', 'dll']
    lst = file_name.split('.')
    if len(lst) != 2:
        return 'No'
    a, b = lst
    if len(a) == 0:
        return 'No'
    if not a[0].isalpha():
        return 'No'
    if b not in suf:
        return 'No'
    if a.count(""0"") + a.count(""1"") + a.count(""2"") + a.count(""3"") + a.count(""4"") + a.count(""5"") + a.count(""6"") + a.count(""7"") + a.count(""8"") + a.count(""9"") > 3:
        return 'No'
    return 'Yes'
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",file_name_check
HumanEval/142,"def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        lst = []
    else:
        maxv = size * size
        lst = [random.randint(-maxv, maxv) for _ in range(size)]
    return lst,
",100 10000 15000 30000,"    return sum(lst) + sum(x ** 2 - x for x in lst[:: 3]) + sum(x ** 3 - x for i, x in enumerate(lst[:: 4]) if i % 3)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sum_squares
HumanEval/143,"def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.
    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""
    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""
    Constraints:
        * 1 <= len(sentence) <= 1000000
        * sentence contains only letters
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = max(size, 4)
    maxu = max(int(size ** .5 + 1), 2)
    lens = [rand_probably_prime(maxv) if random.randint(0, 1) else (rand_probably_prime(maxu) * rand_probably_prime(maxu)) for _ in range(9)]
    lens.append(rand_primality(size, lid, cid))
    words = [''.join(random.choices(string.ascii_letters, k = k)) for k in lens]
    return ' '.join(words),
",100 1000 10000 1000000,"    import math
    def has_prime_len(word):
        n = len(word)
        if n <= 1:
            return False
        elif n <= 3:
            return True
        elif n % 2 == 0 or n % 3 == 0:
            return False
        else:
            for i in range(5, math.isqrt(n) + 1, 6):
                if n % i == 0 or n % (i + 2) == 0:
                    return False
            return True
    return "" "".join(filter(has_prime_len, sentence.split()))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",words_in_sentence
HumanEval/144,"def simplify(x, n):
    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""","def generate_input(size: int, lid: int, cid: int):
    values = []
    if cid % 2 == 0:
        m = max(int(size ** 0.5) + 1, 23)
        a = rand_probably_prime(2, m)
        while True:
            b = rand_probably_prime(11, m)
            if b != a:
                break
        while True:
            c = rand_probably_prime(11, m)
            if c != a and c != b:
                break
        while True:
            d = rand_probably_prime(11, m)
            if d != a and d != b and d != c:
                break
        x, y = f""{a * c * rand_probably_prime(9)}/{b * c}"", f""{b * d * rand_probably_prime(9)}/{a * b}""
        if cid // 2:
            x, y = y, x
        values = [x, y]
    else:
        m = int(size ** 0.5) + 1
        b1 = rand_probably_prime(m)
        b2 = rand_probably_prime(m)
        d1 = rand_probably_prime(m)
        d2 = rand_probably_prime(m)
        b = b1 * b2
        d = d1 * d2
        a = b1 * d1 * rand_probably_prime(9)
        c = b2 * d2 * rand_probably_prime(9)
        values = [f""{a}/{b}"", f""{c}/{d}""]
    return tuple(values)
",100 1000 100000 1000000000,"    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if numerator % denom == 0:
        return True
    return False
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",simplify
HumanEval/145,"def order_by_points(nums):
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        nums = []
    else:
        maxv = size * size
        nums = [random.randint(-maxv, maxv) for _ in range(size)]
    return nums,
",100 10000 15000 30000,"    def digits_sum(n):
        if n < 0:
            neg = True
            n = -n
        else:
            neg = False
        s = 0
        while n:
            x = n % 10
            s += x
            n //= 10
        if neg:
            s -= x * 2
        return s
    return sorted(nums, key=digits_sum)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",order_by_points
HumanEval/146,"def specialFilter(nums):
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 2:
        nums = [[15, -73, -2, 14, -15], [33, -3, 3, 45, 21, 109]][cid]
    else:
        odds = [1, 3, 5, 7, 9]
        nums = []
        for i in range(size):
            typ = random.randint(0, 3)
            if typ == 0:
                m = random.randint(2, 4)
                x = 0
                for i in range(m):
                    x *= 10
                    x += random.choice(odds) if i == 0 or i == m - 1 else random.randint(0, 9)
            elif typ == 1:
                m = random.randint(2, 4)
                x = 0
                for i in range(m):
                    x += random.choice(odds) if i == 0 or i == m - 1 else random.randint(0, 9)
            elif typ == 2:
                x = random.choice(odds)
            else:
                x = -random.randint(0, 9999)
            nums.append(x)
    return nums,
",100 10000 15000 30000,"    odds = ""13579""
    return len([nums for nums in nums if nums > 10 and nums % 10 % 2 and str(nums)[0] in odds])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",specialFilter
HumanEval/147,"def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    return random.randint((size + 1) // 2, size),
",10 4 100 1000000000,"    if n <= 2: return 0
    c2 = 1 + (n - 2) // 3
    c0 = n - c2
    return c2 * (c2 - 1) * (c2 - 2) // 6 + c0 * (c0 - 1) * (c0 - 2) // 6
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",get_max_triples
HumanEval/148,"def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''","def generate_input(size: int, lid: int, cid: int):
    names = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if cid == 0:
        planets = random.choices(names, k = 2)
        i = lid % 2
        p = list(planets[i])
        p[random.randint(0, len(p) - 1)] = random.choice(string.digits)
        planets[i] = ''.join(p)
    elif cid == 1:
        planets = [random.choice(names)] * 2
    elif cid == 2:
        i = random.randint(0, len(names) - 2)
        planets = [names[i], names[i + 1]] if lid % 2 else [names[i], names[i + 1]]
    else:
        while True:
            i = random.randint(0, len(names) - 1)
            j = random.randint(0, len(names) - 1)
            if abs(i - j) > 1:
                break
        planets = [names[i], names[j]]
    return tuple(planets)
",1 1 1 1,"    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 == planet2 or planet1 not in planet_names or planet2 not in planet_names:
        return ()
    else:
        planet1_index = planet_names.index(planet1)
        planet2_index = planet_names.index(planet2)
        if planet1_index < planet2_index:
            return (planet_names[planet1_index + 1: planet2_index])
        else:
            return (planet_names[planet2_index + 1 : planet1_index])
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",bf
HumanEval/149,"def sorted_list_sum(lst):
    """"""Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have similar lengths.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        lst = [""cd"", ""a"", ""aa"", ""aaa"", ""ab""]
    else:
        lst = [''.join(random.choices(string.ascii_lowercase, k = random.randint(2, 3))) for _ in range((size + 2) // 3)]
    return lst,
",100 10000 15000 30000,"    lst = [x for x in lst if len(x) % 2 == 0]
    lst.sort()
    lst.sort(key = len)
    return lst
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",sorted_list_sum
HumanEval/150,"def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""","def generate_input(size: int, lid: int, cid: int):
    n = rand_primality(size, lid, cid)
    while True:
        x = random.randint(1, size)
        y = random.randint(1, size)
        if x != y:
            break
    return n, x, y
",100 1000 100000 1000000000,"    if n <= 1:
        return y
    if n <= 3:
        return x
    if n % 2 == 0 or n % 3 == 0:
        return y
    import math
    for i in range(5, math.isqrt(n) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return y
    return x
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",x_or_y
HumanEval/151,"def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        input_list = [[0], [-2, 7], [-1, -2, 0], [1, 3, 2, 0]][cid]
    else:
        maxv = int(size ** 1.5)
        input_list = []
        for _ in range(size):
            typ = random.randint(0, 1)
            num = random.randint(-maxv, maxv) if typ else round(random.uniform(-maxv, maxv), 2)
            if typ == 0 and num % 1. == 0.:
                num += 1e-5
            input_list.append(num)
    return input_list,
",100 10000 15000 30000,"    return sum(lst * lst for lst in lst if lst > 0 and type(lst) is int and lst % 2 == 1)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",double_the_difference
HumanEval/152,"def compare(game,guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""","def generate_input(size: int, lid: int, cid: int):
    maxv = size * size
    game_list = [random.randint(-maxv, maxv) for _ in range(size)]
    guess_list = [random.randint(-maxv, maxv) for _ in range(size)]
    return game_list, guess_list
",100 10000 15000 30000,"    return [abs(x-y) for x,y in zip(game,guess)]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",compare
HumanEval/153,"def Strongest_Extension(class_name, extensions):
    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 2:
        return [('my_class', ['Be', 'AA', 'CC']), ('Slices', ['Cheese', 'StuFfed', 'SErviNGSliCes'])][cid]
    charset = string.ascii_letters + '_'
    class_name = ''.join(random.choices(charset, k = random.randint(4, 5)))
    extensions = []
    from copy import deepcopy
    for _ in range((size + 1) // 2):
        ext1 = random.choices(charset, k = random.randint(4, 5))
        ext0 = deepcopy(ext1)
        ext0[random.randint(0, len(ext0) - 1)] = '_'
        extensions.append(''.join(ext0))
        extensions.append(''.join(ext1))
    return class_name, extensions
",100 10000 15000 30000,"    def strength(s: str) -> int:
        ans = 0
        for ch in s:
            if ch.islower(): ans -= 1
            elif ch.isupper(): ans += 1
        return ans
    return class_name + '.' + max(extensions, key = strength)
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",Strongest_Extension
HumanEval/154,"def cycpattern_check(a , b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 6:
        return [(""abcd"",""abd""), (""hello"",""ell""), (""whassup"",""psus""), (""abab"",""baa""), (""efef"",""eeff""), (""himenss"",""simen"")][cid]
    size = max(size, 2)
    while True:
        charset = list(random.choices(string.ascii_lowercase, k = 2))
        if charset[0] != charset[1]:
            break
    if lid > 0 or cid % 2:
        x, y = charset
        a = x * (size * 2)
        k = random.randint((size - 1) // 2, size - 1)
        b = x * k + y + x * (size - 1 - k)
        return a, b
    else:
        a = list(random.choices(charset, k = 2 * size))
        length = random.randint((size + 1) // 2, size)
        start_index = random.randint(0, size - length)
        end_index = start_index + length
        b = a[start_index:end_index]
        k = random.randint(0, length)
        if k != 0 and k != -1:
            b = b[k :] + b[: k]
        return ''.join(a), ''.join(b)
",20 200 2000 20000,"    from copy import deepcopy
    class State:
        def __init__(self, len = 0, link = 0, next = None):
            self.len = len
            self.link = link
            self.next = dict() if next is None else deepcopy(next)
    st = [State(len = 0, link = -1)]
    last = 0
    def sam_extend(c, last): # to build the suffix automaton
        cur = len(st)
        st.append(State(len = st[last].len + 1))
        p = last
        while p != -1 and c not in st[p].next:
            st[p].next[c] = cur
            p = st[p].link
        if p == -1:
            st[cur].link = 0
        else:
            q = st[p].next[c]
            if st[p].len + 1 == st[q].len:
                st[cur].link = q
            else:
                clone = len(st)
                st.append(State(len = st[p].len + 1, link = st[q].link, next = st[q].next))
                while p != -1 and st[p].next[c] == q:
                    st[p].next[c] = clone
                    p = st[p].link
                st[q].link = st[cur].link = clone
        last = cur
        return last
    for c in a:
        last = sam_extend(c, last)
    v = 0
    l = 0
    for c in b + b:
        while v and c not in st[v].next:
            v = st[v].link
            l = st[v].len
        if c in st[v].next:
            v = st[v].next[c]
            l += 1
        if l >= len(b):
            return True
    return False
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",cycpattern_check
HumanEval/155,"def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 2:
        num = [385, -76][cid]
    else:
        num = random.randint(10 ** (size - 1), 10 ** size - 1)
        if cid % 2:
            num = -num
    return num,
",10 25 50 100,"    if num < 0:
        num = -num
    num = str(num)
    m = len(num)
    odd = len(num.translate({48: None, 50: None, 52: None, 54: None, 56: None}))
    return m - odd, odd
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",even_odd_count
HumanEval/156,"def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    number = random.randint(1, size)
    return number,
",5 20 100 1000,"    return ("""", ""m"")[number // 1000] + ("""", ""c"", ""cc"", ""ccc"", ""cd"", ""d"", ""dc"", ""dcc"", ""dccc"", ""cm"")[(number % 1000) // 100] + ("""", ""x"", ""xx"", ""xxx"", ""xl"", ""l"", ""lx"", ""lxx"", ""lxxx"", ""xc"")[(number % 100) // 10] + ("""", ""i"", ""ii"", ""iii"", ""iv"", ""v"", ""vi"", ""vii"", ""viii"", ""ix"")[number % 10]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",int_to_mini_roman
HumanEval/157,"def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''","def generate_input(size: int, lid: int, cid: int):
    import random
    import math
    if random.randint(0, 1):
        m = int(math.sqrt(size))
        while True:
            a, b = random.randint(1, m), random.randint(1, m)
            if a != b:
                if a < b:
                    a, b = b, a
                break
        sides = [a ** 2 - b ** 2, 2 * a * b, a ** 2 + b ** 2]
        random.shuffle(sides)
    else:
        sides = [random.randint(1, size), random.randint(1, size), random.randint(1, size)]
    return tuple(sides)
",1000 100000 10000000 1000000000,"    a = a * a
    b = b * b
    c = c * c
    return a == b + c or b == a + c or c == a + b
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",right_angle_triangle
HumanEval/158,"def find_max(words):
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        words = [[""""], [""namename"", ""ofthe"", ""string""], [""name"", ""enam"", ""game""], [""aa"", ""bbbbb"" ,""ccc""]][cid]
    else:
        words = [''.join(random.choices(string.ascii_letters, k = 10)) for _ in range((size + 1) // 2)]
    return words,
",100 10000 15000 30000,"    mx_ch_cnt, ans = 0, """"
    for word in words:
        ch_cnt = len(set(word)) 
        if ch_cnt > mx_ch_cnt or (ch_cnt == mx_ch_cnt and word < ans):
            mx_ch_cnt, ans = ch_cnt, word
    return ans
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",find_max
HumanEval/159,"def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000000000000
    * 0 <= need <= 1000000000000
    * 0 <= remaining <= 1000000000000
    Have fun :)
    """"""","def generate_input(size: int, lid: int, cid: int):
    import random
    number = random.randint(0, size)
    need = random.randint(0, size)
    remaining = random.randint(0, size)
    return number, need, remaining
",1000 100000 10000000 1000000000,"    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",eat
HumanEval/160,"def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        return (['+', '*', '-'], [2, 3, 4, 5])
    def do_algebra(operator, operand):
        exp = []
        for i in range(len(operator)):
            exp.append(str(operand[i]) + operator[i])
        exp.append(str(operand[-1]))
        return eval(''.join(exp))
    while True:
        size = max(size, 2)
        operators = ['+', '-', '*', '//', '**']
        operator = list(random.choices(operators, k=size - 1))
        operand = [random.randint(1, 9) for _ in range(size)]
        try:
            do_algebra(operator, operand)
        except:
            pass
        else:
            return operator, operand
",4 8 12 16,"    exp = []
    for i in range(len(operator)):
        exp.append(str(operand[i]) + operator[i])
    exp.append(str(operand[-1]))
    return eval(''.join(exp))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",do_algebra
HumanEval/161,"def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid < 4:
        s = [""35214"", ""AdOr"", ""@2000"", ""#a@C""][cid]
    else:
        if cid % 2 == 0:
            charset = string.digits + string.punctuation
        else:
            charset = random.choices(string.ascii_letters, k = 16) + random.choices(string.digits + string.punctuation, k = 16)
        s = ''.join(random.choices(charset, k = size))
    return s,
",100 10000 20000 40000,"    return s.swapcase() if any(map(str.isalpha, s)) else s[::-1]
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",solve
HumanEval/162,"def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""","def generate_input(size: int, lid: int, cid: int):
    if lid == 0 and cid == 0:
        text = """"
    else:
        text = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k = size))
    return text,
",100 10000 15000 30000,"    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",string_to_md5
HumanEval/163,"def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""","def generate_input(size: int, lid: int, cid: int):
    typ = [0, 8, 12, 16][lid] + cid
    if typ % 3 == 0:
        a = random.choice([0, 2, 4, 6, 8])
    elif typ % 3 == 1:
        a = random.choice([1, 3, 5, 7, 9])
    else:
        a = random.randint(10, 14)
    typ //= 3
    if typ % 3 == 0:
        b = random.choice([0, 2, 4, 6, 8])
    elif typ % 3 == 1:
        b = random.choice([1, 3, 5, 7, 9])
    else:
        b = random.randint(10, 14)
    typ //= 3
    if typ % 2:
        a, b = b, a
    return a, b
",1 1 1 1,"    if a > b: a, b = b, a
    return list(range(a + a % 2, min(b + 1, 10), 2))
","def __check(input, answer, output):
    return type(output) == type(answer) and output == answer
",generate_integers
